/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#ifndef MENU_GENERATED_CODE_H
#define MENU_GENERATED_CODE_H

#include <Arduino.h>
#include <tcMenu.h>
#include "tcMenuU8g2.h"
#include <RuntimeMenuItem.h>
#include <IoAbstraction.h>
#include <EepromItemStorage.h>
#include <ArduinoEEPROMAbstraction.h>

// variables we declare that you may need to access
extern const PROGMEM ConnectorLocalInfo applicationInfo;
extern U8G2_SSD1306_128X64_NONAME_F_HW_I2C gfx;
extern U8g2Drawable gfxDrawable;
extern GraphicsDeviceRenderer renderer;

// Any externals needed by IO expanders, EEPROMs etc


// Global Menu Item exports
extern ActionMenuItem menuVersion;
extern ActionMenuItem menuFactoryReset;
extern ActionMenuItem menuPrintSettings;
extern AnalogMenuItem menuDValue;
extern AnalogMenuItem menuIValue;
extern AnalogMenuItem menuPValue;
extern BackMenuItem menuBackEditPIDVariables;
extern SubMenuItem menuEditPIDVariables;
extern AnalogMenuItem menuMaxRH;
extern AnalogMenuItem menuFAEOnTime;
extern AnalogMenuItem menuLightOnTime;
extern BooleanMenuItem menuLEDShowRH;
extern BooleanMenuItem menuenableFan;
extern BackMenuItem menuBackAdvanced;
extern SubMenuItem menuAdvanced;
extern ActionMenuItem menuCalibrateFAE;
extern ActionMenuItem menuSaveSettings;
extern AnalogMenuItem menuFAEPerHour;
extern AnalogMenuItem menuRHSetPoint;
extern BackMenuItem menuBackOptions;
extern SubMenuItem menuOptions;
extern EnumMenuItem menuPresets;
extern BooleanMenuItem menuControllerBool;
extern BooleanMenuItem menuEnableLED;
extern TextMenuItem menuTString;
extern TextMenuItem menuRHString;

// Provide a wrapper to get hold of the root menu item and export setupMenu
inline MenuItem& rootMenuItem() { return menuRHString; }
void setupMenu();

// Callback functions must always include CALLBACK_FUNCTION after the return type
#define CALLBACK_FUNCTION

void CALLBACK_FUNCTION CalibrateFAECallback(int id);
void CALLBACK_FUNCTION DValueCallback(int id);
void CALLBACK_FUNCTION FAEChangedCallback(int id);
void CALLBACK_FUNCTION FAEOnTimeCallBack(int id);
void CALLBACK_FUNCTION IValueCallback(int id);
void CALLBACK_FUNCTION LEDShowRHCallback(int id);
void CALLBACK_FUNCTION MaxRHCallback(int id);
void CALLBACK_FUNCTION PValueCallback(int id);
void CALLBACK_FUNCTION PresetsCallback(int id);
void CALLBACK_FUNCTION PrintSettingsCallback(int id);
void CALLBACK_FUNCTION RHChangedCallback(int id);
void CALLBACK_FUNCTION SaveSettingsCallback(int id);
void CALLBACK_FUNCTION controllerEnableCallback(int id);
void CALLBACK_FUNCTION enableLEDCallback(int id);
void CALLBACK_FUNCTION factoryReset(int id);
void CALLBACK_FUNCTION firmwareVersionCallback(int id);
void CALLBACK_FUNCTION lightOntimeCallback(int id);

#endif // MENU_GENERATED_CODE_H
